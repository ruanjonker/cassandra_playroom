###
### Metric Collector for Apache Cassandra Configuration
###

### The frequency that metrics are reported to the Metrics Collector.
### Default - 30s
metric_sampling_interval_in_seconds: 30

#####################################################################
### List of metrics to allow or deny
###
### pattern: regex pattern to search, can be a sub-match or full match
### scope: 'global' will affect all data. 'datalog' will only affect the datalog
### policy: 'allow' or 'deny'
### The last applicable rule wins, which works similarly to iptables firewall rules:
###   - A metric that would be denied by a rule and then allowed by another would be allowed.
###   - A metric that would be allowed by a rule and then denied by another would be denied.
### This allows to apply efficient filters on table level metrics for example and allow just a 
### subset of those to match the dashboards requirements.
### Filter rules are applied both on the name of the Cassandra metric and a cleaned/formatted
### version of the metric name:
###   - org.apache.cassandra.metrics.Table.LiveSSTableCount
###   - org.apache.cassandra.metrics.table.live_ss_table_count
### In the event the metric name and the cleaned metric name result in a differing policy,
### the deny policy would be applied.
### Default - allow all

# Below sample rules allow to extract only a subset of table level metrics and lighten the load
# for clusters with 100s of tables.
filtering_rules:
  - policy: deny
    pattern: .*
    scope: global
  #Table Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.table\.
    scope: global  
  - policy: deny
    pattern: org\.apache\.cassandra\.metrics\.table\.(\w+)\.(system|system_auth|system_distributed|system_traces)
    scope: global  
  #Keyspace Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.keyspace\.
    scope: global
  - policy: deny
    pattern: org\.apache\.cassandra\.metrics\.keyspace\.(\w+)\.(system|system_auth|system_distributed|system_traces)
    scope: global
  #ThreadPool Metrics (one type is repair.task so we just ignore the second part)
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.thread_pools\.
    scope: global
  #ClientRequest Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.client_request\.
    scope: global
  #Cache Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.cache\.
    scope: global
  #CQL Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.cql\.
    scope: global
  #Dropped Message Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.dropped_message\.
    scope: global
  #Streaming Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.streaming\.
    scope: global
  #CommitLog Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.commit_log\.
    scope: global
  #Compaction Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.compaction\.
    scope: global
  #Storage Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.storage\.
    scope: global
  #Batch Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.batch\.
    scope: global
  #Client Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.client\.
    scope: global
  #BufferPool Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.buffer_pool\.
    scope: global
  #Index Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.index\.
    scope: global
  #HintService Metrics
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.hinted_hand_off_manager\.
    scope: global
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.hints_service\.hints_delays\-
    scope: global
  # Misc
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.memtable_pool\.
    scope: global
  - policy: allow
    pattern: org\.apache\.cassandra\.metrics\.read_coordination\.
    scope: global
  #GC Metrics
  - policy: allow
    pattern: jvm\.gc\.
    scope: global
  #JVM Metrics
  - policy: allow
    pattern: jvm\.memory\.pools\.
    scope: global
  - policy: allow
    pattern: jvm\.fd\.usage
    scope: global
  - policy: allow
    pattern: jvm\.buffers\.
    scope: global


#######################################################################
### Disk Logging of Metrics and Events (DataLog)
###
### The default mode enables metrics collection and diagnostic events
### to be stored on local on disk in the location defined by data_dir.
###
### This data can be used to help diagnose cluster / node level problems
### by DataStax support: https://www.datastax.com/keepcalm
###
### The raw data can be parsed using the included datalog-parser.py script
write_to_disk_enabled: true

### The maximum number amount of on disk data to store in MB
### Default - 5000
#data_dir_max_size_in_mb: 5000

### Directory to store collected metrics.
### Default directory is Cassandra data directory. You can customize the location by uncomment and correct data_dir
#data_dir: /var/lib/cassandra

### Directory to store logs for collected metrics. The log file is cassandra-collectd.log
### Default directory is Cassandra log directory. You can customize the location by uncomment and correct log_dir
#log_dir: /var/log/cassandra
